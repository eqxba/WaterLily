#version 450

#extension GL_GOOGLE_include_directive: require

#include "Common.h"
#include "Math.glsl"

layout(local_size_x = PRIMITIVE_CULL_WG_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(push_constant) uniform Globals
{
    PushConstants globals;
};

layout(set = 0, binding = 0) readonly buffer Primitives 
{
    Primitive primitives[]; 
};

layout(set = 0, binding = 1) readonly buffer Draws 
{
    Draw draws[]; 
};

layout(set = 0, binding = 2) buffer CommandCount
{
    uint commandCount;
};

#if MESH_PIPELINE // TODO: same set+binding w/o preprocessor and use spec constant for mesh pipeline?
layout(set = 0, binding = 3) writeonly buffer TaskCommands
{
    TaskCommand taskCommands[];
};
#else
layout(set = 0, binding = 3) writeonly buffer IndirectCommands
{
    VkDrawIndexedIndirectCommand indirectCommands[];
};
#endif

#if VISUALIZE_LODS
layout(set = 0, binding = 4) writeonly buffer DrawsDebugData
{
    uint drawsDebugData[];
};
#endif

bool frustumCull(vec3 center, float radius)
{
    bool bCulled = false;

    CullData cullData = globals.cullData;

    // Utilize symmetry: left + right, bottom + top
    bCulled = bCulled || cullData.frustumRightX * abs(center.x) + cullData.frustumRightZ * center.z < -radius;
    bCulled = bCulled || cullData.frustumTopY * abs(center.y) + cullData.frustumTopZ * center.z < -radius;

    bCulled = bCulled || cullData.near - center.z < -radius;
    // Note: infinite far

    return bCulled;
}

bool contributionCull(vec3 center, float radius)
{
    vec4 lbrt = sphereNdcExtents(center, radius, globals.projection);

    float width = abs(lbrt.z - lbrt.x);
    float height = abs(lbrt.w - lbrt.y);
    
    return max(width, height) < CONTRIBUTION_CULL_THRESHOLD;
}

uint calculateLodIndex(Primitive primitive, Draw draw, vec3 center, float radius)
{   
    float distanceToSphere = max(length(center) - radius, 0);
    float threshold = distanceToSphere * globals.lodTarget / draw.scale;

    uint lodIndex = 0;

    while (lodIndex < primitive.lodCount - 1 && primitive.lods[lodIndex + 1].error < threshold)
    {
        ++lodIndex;
    }

    return lodIndex;
}

// Each thread processes 1 primitive: selects LOD, does some culling and possibly emits further work
void main()
{
    uint drawIndex = gl_GlobalInvocationID.x;

    if (drawIndex >= globals.drawCount)
    {
        return;
    }
    
    Draw draw = draws[drawIndex];    
    Primitive primitive = primitives[draw.primitiveIndex];

    vec3 center = rotateQuat(primitive.center, draw.rotation) * draw.scale + draw.position;
    center = (globals.cullData.view * vec4(center, 1.0)).xyz;

    float radius = primitive.radius * draw.scale;

    bool bCulled = frustumCull(center, radius) || contributionCull(center, radius);    

    #if MESH_PIPELINE || DRAW_INDIRECT_COUNT
        if (bCulled)
        {
            return;
        }
    #endif

    uint lodIndex = globals.bUseLods == 1 ? calculateLodIndex(primitive, draw, center, radius) : 0;
    Lod lod = primitive.lods[lodIndex];

    #if VISUALIZE_LODS
        drawsDebugData[drawIndex] = lodIndex;
    #endif

    #if MESH_PIPELINE
        // TODO: Does this architecture produce enough work for task shader? (i.e. WGs with small meshlet number)
        // Try another approach with compacting and measure perf difference - kinda hard actually to implement
        uint taskCommandCount = (lod.meshletCount + TASK_WG_SIZE - 1) / TASK_WG_SIZE;
        uint commandIndex = atomicAdd(commandCount, taskCommandCount);

        if (commandIndex + taskCommandCount > PRIMITIVE_CULL_MAX_COMMANDS)
        {
            return;
        }
        
        for (uint i = 0; i < taskCommandCount; ++i)
        {
            uint meshletOffset = lod.meshletOffset + i * TASK_WG_SIZE;
            uint meshletCount = min(lod.meshletCount - i * TASK_WG_SIZE, TASK_WG_SIZE);
            
            taskCommands[commandIndex + i].drawIndex = drawIndex;
            taskCommands[commandIndex + i].meshletOffset = meshletOffset;
            taskCommands[commandIndex + i].meshletCount = meshletCount;            
        }
    #else
        #if DRAW_INDIRECT_COUNT
            uint commandIndex = atomicAdd(commandCount, 1);
        #else
            uint commandIndex = drawIndex;
        #endif

        if (commandIndex >= PRIMITIVE_CULL_MAX_COMMANDS)
        {
            return;
        }

        indirectCommands[commandIndex].indexCount = lod.indexCount;

        #if DRAW_INDIRECT_COUNT
            indirectCommands[commandIndex].instanceCount = 1;
        #else
            indirectCommands[commandIndex].instanceCount = bCulled ? 0 : 1;
        #endif
        
        indirectCommands[commandIndex].firstIndex = lod.indexOffset;
        indirectCommands[commandIndex].vertexOffset = primitive.vertexOffset;
        indirectCommands[commandIndex].firstInstance = drawIndex;
    #endif
}